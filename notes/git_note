// --- Git Diff --- //

git diff			// Look diff from previous commited version
git diff > pk_xxx	// Output diff to 'pk_xxx' file (pk:patch kernel)
git checkout -f		// Recover to previous version
git apply pk_xxx	// Apply patch 'pk_xxx'

git reset --hard 6a137		// Force reset to version '6a137' will lost new commit
git format-patch HEAD^^^	// Patch to nth(^) previos version from HEAD, output multiple files

git diff --name-status master..branchName	// Lookup 2 branch difference
git diff --stat --color master..branchName	// Lookup 2 branch difference more detail

// --- Git Branch --- //

git branch -av	// detail branch info

// Make existing branches to track remote branches
branch --set-upstream local-branch-name origin/remote-branch-name

// Merge multiple commits to one commit (ex: ABCDE), you want to ABE'(E'=CDE)
git rebase -i HEAD~2	// rebase to C
s e97a17b E
s asd314f D
p asd314f C

// How to tell which local branch is tracking which remote branch in Git
git remote show origin

// Discard local changes and checkout to other branch then delete this experimental branch 
1. Delete all files in the branch
2. git reset --hard 	// reset the entire repository to last commited state	

git log --pretty=short	// 簡短的log
git log --oneline		// 超短的log
git log --author="Jon"	// Show Jon's commits

// Show the HEAD change history
git reflog show HEAD@{now} -10

// Discard local changes of some file
git checkout -- <somefile>

// Pathc from commit to commit
git format-patch 7ef30fa2c(你要從別人那個commit開始patch)..e9623f0e67(一直patch到你想要的commit) --stdout > pk.patch

// 一個branch有tracking remote branch時，你在從他checkout一個branch出來，新的branch並不會也tracking同一個branch，要自己設定

// 一旦 add 以後，git diff 就看不到了

git apply --reject	// 會把可以上的部份上去，衝突部份他會寫到 xxx.c.rej 檔案中

git reset	// 把changes to be commited的部份拉到 changes but not commit
git ch .	// 把changes but not commit 變成 no changes

// Single file checkout
git checkout v1.2.3 -- filename         # tag v1.2.3
git checkout stable -- filename         # stable branch
git checkout origin/master -- filename  # upstream master
git checkout HEAD -- filename           # the version from the most recent commit
git checkout HEAD^ -- filename          # the version before the most recent commit


// Global git ignore 
git config --global core.excludesfile ~/.gitignore 
printf ".DS_Store\nThumbs.db\n" >> ~/.gitignore	// 忽略所有 .DS_Store 和 Thumbs.db

// Always commit good code base before apply any debug step

// Use rebase to merge commits
// Suppose you have a history containing the three commits A, B and C: A-B-C
// I would like to combine the two commits A and B to one commit AB: AB-C
// You tried:
git rebase -i A

//It is possible to start like that if you continue with edit rather than squash:
edit e97a17b B
pick asd314f C

//then run
git reset --soft HEAD^
git commit --amend
git rebase --continue


// 整理code的流程
// 列出某次commit修改了哪些檔案
git log
git show f8040320c63522312ec4ccaaccca9c8d7275b720 --name-only
git show f8040320c63522312ec4ccaaccca9c8d7275b720 --name-only |awk '{print "cp " $1 " mhl/"$1}'

mkdir mhl	// 新增一個資料夾存放這些修改的檔案

// 然後複製產生的命令,執行複製動作
cp arch/arm/mach-tegra/cpu-tegra3.c mhl/
cp drivers/video/tegra/dc/hdmi.c mhl/
cp drivers/video/tegra/fb.c mhl/

// 針對每一次的 commit 做完複製動作, 開一個文字檔複製起這些 cp
// 指令(因為有路徑的問題)

// 整理該文字檔將相同資料夾的分類

// 回復到尚未修改的版本
git format-patch HEAD^^^
git reset --hard HEAD^^^ 

// 再利用 meld 針對, mhl 資料夾進行 merge
