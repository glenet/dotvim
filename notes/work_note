// NV Doc
[Doc pass]
Mobile-HTC@nvidia.com
rjkOzzSu

[Repo]
ls -al .repo/	//列出目前repo指向的manifest

1. Reset 所有 git 回到某個時間點（也可針對單一 git）：
$ . setbuildenv u
$ cd $TOP
$ chmod 755 reset
$ repo forall -pvc '$TOP/reset "10/10 23:59 2011"'

2. 過濾出 git 中某個時間區間的 commit：
$ chmod 755 filter-date
$ cd framework/base
$ ../../filter-date "10/14 00:00" "10/14 23:59"

3.
$ repo forall -pvc '$TOP/repocheck "base"'

[IP]
\\10.9.113.174\share\	// 桌機

[Build Code]
// 查看自己的 define 有沒有進去
vim $OUT/obj/KERNEL/.config

// 查看 device 是 XA, XB, or ...
在 kernel log 裡面 search "phase"

// 單獨燒 kernel
kernel_build -j4;make_boot_image

// VIM:把某幾行的tab變成space
:set expandtab
:60,70ret! 4
:set noexpandtab

/*--- Cscope ---*/
find . -name "*.h" -o -name "*.c" -o -name "*.cc" -o -name "*.cpp" -o -name "*.hpp"  > cscope.files
cscope -Rbkq

[GPIO]
// Dump gpio in kernel
// 如果要在 suspend 狀態下 dump gpio, 要把 mach-tegra/gpio.c 下 tegra_gpio_suspend(void) 裡面的 gpio_dump 註解拿掉
adb shell cat /d/htc_tegra_gpio

// Kernle gpio 設定大全(這些只是config, 真正要work要呼叫tegra_gpio_enable)
Config 			Sample Code
-------         ------------
O(L)			#include <linux/gpio.h>
				gpio_direction_output(unsigned gpio, 0);

O(H)			#include <linux/gpio.h>
				gpio_direction_output(unsigned gpio, 1);

I(PU)			#include <linux/gpio.h>
				gpio_direction_input(unsigned gpio);
				#include <mach/pinmux.h>
				int tegra_pinmux_set_pullupdown(enum tegra_pingroup pg, enum tegra_pullupdown pupd);
I(PD)

A				#include <mach/gpio.h>
				tegra_gpio_disable(int gpio);

NORMAL,		OUTPUT == output only
TRISTATE,	INPUT  == input only
NORMAL,		INPUT  == bi-direction
TRISTATE,	OUTPUT == disable input and output

// GPIO 和 SFIO 
SFIO 的 Mux 參數要去 arch/arm/mach-tegra/pinmux-t3-tables.c 查詢
GPIO 則使用 RSVD (Reserved 的意思，使用 RSVD 就要去 bootloader 確定使否有 config 這個 pin)

// 如果gpio不如自己預期怎麼辦
1. grep一下, 是否被別人修改
2. 在 pinmux 設定之後, 緊接用 gpio_dump 看值對不對
3. Active 狀態不需要在 resume 特別設定
4. 在 pinmux 的 config 只是單純設定, 真正要作用，要呼叫 tegra_gpio_enable
5. gpio_request_array 也只是設定，下面要加 tegra_gpio_enable 迴圈來 enable
6. request過的gpio不需要再request一次，直接tegra_gpio_setvalue就可以

[adb]
// Dump HtcSsdTestTool log
adb pull /data/htclog htc_log

// 清除 htclog
adb shell rm /data/htclog/＊

// 沒開 SsdTestTool, 看 device log 的方式
1. 把 system/core/rootdir/init.rc 裡面 dlog 的註解拿掉
2. adb pull /data/dlog/ dlog/

// 調整 backlight 最亮
echo 255 > sys/class/backlight/tegra-pwm-bl/brightness

// 設定調整 hdmi 參數
adb shell "echo 4 > /sys/devices/nvhost/tegradc.1/graphics/fb1/blank" (關)
adb shell "echo 0 > /sys/devices/nvhost/tegradc.1/graphics/fb1/blank" (開)
*echo 4，本來顯示的畫面會暗掉，再 echo 0 會在亮起來
*echo 4 之後，拔除 cable 再插上，還是可以顯示

adb shell "cat /sys/class/switch/tegradc.1/state (ok, 1280x720)
adb shell "cat /sys/class/switch/tegradc.1/subsystem/hdmi/state" (ok, 0:unplugged, 1:plugged)

// 將 hal 層的更動更新到 device 裡面
adb remount;	//要更動 read-only 的區域要先做的動作 
adb push $OUT/system/lib/hw/gralloc.tegra.so system/lib/hw; 
adb reboot;

adb shell dumpsys SurfaceFlinger

[Issue]
// ITS debug skill
1. 不要相信 QA 的 time stamp, 拿到 issue 馬上檢查 log 時間的正確性

// framework keyword
ANR(Application Not Responding) fatal error fingerprint Watchdog "About to"(surfaceflinger) die

// kernel keyword
DISP dc brightness late_resume early_suspend panic

log 裡面看到 tegra-grhost 代表某個 module hung 住

當問題發生在某個 func 的時候，可以把該 func 變成一個單純印 log 的 func，釐清是否是該 func 搞得鬼！

[Code]
1. Please alway add comment in code if it is workaround or issue
2. porting 的時候要確認每個部份都有正確的被編譯，那就是在你預期要 run 到的地方都加一些 print 確保他真的 run 到了！
3. break down 問題的能力，把 feature切分成小task，實踐due day的觀念

